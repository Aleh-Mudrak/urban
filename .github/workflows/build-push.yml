name: Build and Deploy to GKE

on:
  workflow_dispatch:
    inputs:
      Environment:
        description: "Environment: (test|dev|prod)"
        default: "test"
        required: true

env:
  PROJECT_ID: ${{ secrets.GKE_PROJECT }}
  IMAGE: "technical_test"

jobs:
  cicd:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    # Setup gcloud CLI
    - uses: google-github-actions/setup-gcloud@94337306dda8180d967a56932ceb4ddcf01edae7
      with:
        service_account_key: ${{ secrets.GKE_SA_KEY }}
        project_id: ${{ secrets.GKE_PROJECT }}

    # Configure Docker to use the gcloud command-line tool as a credential
    # helper for authentication
    - run: |-
        gcloud --quiet auth configure-docker

    # Get the GKE credentials so we can deploy to the cluster
    - uses: google-github-actions/get-gke-credentials@fb08709ba27618c31c09e014e1d8364b02e5042e
      with:
        cluster_name: ${{ secrets.GKE_CLUSTER }}
        location: ${{ secrets.GKE_ZONE }}
        credentials: ${{ secrets.GKE_SA_KEY }}

    # Build the Docker image
    - name: PROJECT_VERSION
      id: PROJECT_VERSION
      run: |-
        # HASH short commit
          branch_name=`git symbolic-ref HEAD 2>/dev/null | cut -d"/" -f 3`  # GETTING CURRENT BRANCH NAME
          commit_hash=`git rev-parse --short HEAD`  # CURRENT COMMIT short HASH
          echo "PROJECT_VERSION = ${branch_name}-${commit_hash}"
          echo "::set-output name=PROJECT_VERSION::${branch_name}-${commit_hash}"

    # Build the Docker image
    - name: Build
      run: |-
        PROJECT_VERSION="${{  steps.PROJECT_VERSION.outputs.PROJECT_VERSION  }}"
        docker build \
          --tag "gcr.io/$PROJECT_ID/$IMAGE:$PROJECT_VERSION" \
          --build-arg GITHUB_SHA="$GITHUB_SHA" \
          --build-arg GITHUB_REF="$GITHUB_REF" \
          application/.

    # Push the Docker image to Google Container Registry
    - name: Publish
      id: Publish
      run: |-        
        PROJECT_VERSION="${{  steps.PROJECT_VERSION.outputs.PROJECT_VERSION  }}"
        docker push "gcr.io/$PROJECT_ID/$IMAGE:$PROJECT_VERSION"

    # Set up kustomize
    - name: Set up Kustomize
      run: |-
        curl -sfLo kustomize https://github.com/kubernetes-sigs/kustomize/releases/download/v3.1.0/kustomize_3.1.0_linux_amd64
        chmod u+x ./kustomize

    # Deploy the Docker image to the GKE cluster
    - name: Deploy
      run: |-
        PROJECT_VERSION="${{  steps.PROJECT_VERSION.outputs.PROJECT_VERSION  }}"
        # ./kustomize edit set image gcr.io/PROJECT_ID/IMAGE:TAG=gcr.io/$PROJECT_ID/$IMAGE:$PROJECT_VERSION
        # ./kustomize build . | kubectl apply -f -
        docker pull "gcr.io/$PROJECT_ID/$IMAGE:$PROJECT_VERSION"
        kubectl apply -f deploy-app/
        kubectl rollout status deployment/${{ github.event.inputs.deployment_name }}
        kubectl get services -o wide
        kubectl get po -n prod -o wide
