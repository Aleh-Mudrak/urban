name: Build and Deploy to GKE

env:
  PROJECT_ID: ${{ secrets.GKE_PROJECT }}
  APP_NAME: "technical-test"
  SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
  slackStart: "GHActions/slack_start.yml"
  slackError: "GHActions/slack_error.yml"
  slackFinish: "GHActions/slack_build.yml"
  envs: ( dev test prod )

on:
  workflow_dispatch:
    inputs:
      env:
        description: "Environment: (test|dev|prod)"
        default: "prod"
        required: true

jobs:
  cicd:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    # Setup gcloud CLI
    - uses: google-github-actions/setup-gcloud@v0
      with:
        service_account_key: ${{ secrets.GKE_SA_KEY }}
        project_id: ${{ secrets.GKE_PROJECT }}

    # Check input variables
    - name: Check input Variables
      id: Check_input_Variables
      if: github.event_name == 'workflow_dispatch'
      run: |
        echo "github.ref_name = ${{ github.ref_name }}"
        echo "github.ref_type = ${{ github.ref_type }}"
        echo "helm version = $(helm version)"
          # Check and Print input data
        echo " --- "
          # Check env
        if [[ " ${envs[@]} " =~ " ${{ github.event.inputs.env }} " ]]; then 
          echo "--- Environment: <${{ github.event.inputs.env }}> is correct ---"
        else 
          echo "ERROR ===> Environment: <${{ github.event.inputs.env }}> doesn't exist."
          echo "Availible Environments: ${envs[@]}"
          sed -i "s/inputs.ErrorReason/Environment: *${{ github.event.inputs.env }}* is incorrect/" $slackError
          cp $slackError slackstart.yml
          exit 1
        fi

    # Slack Start Notification
    - name: Slack Notification Start
      id: Slack_Notification_Start
      run: |
        sed -i 's/inputs.Environment/${{ github.event.inputs.env }}/' $slackStart 
        # sed -i "/inputs./,+1 d" $slackStart
        cp $slackStart slackstart.yml
        cat slackstart.yml
    - uses: act10ns/slack@v1.5.0
      with:
        status: ${{ job.status }}
        steps: ${{ toJson(steps) }}
        channel: "#test-chat-ops"
        config: slackstart.yml
      if: always()

    # Configure Docker to use the gcloud command-line tool as a credential
    # helper for authentication
    - run: |-
        gcloud --quiet auth configure-docker

    # Get the GKE credentials so we can deploy to the cluster
    - uses: google-github-actions/get-gke-credentials@v0
      with:
        cluster_name: ${{ secrets.GKE_CLUSTER }}
        location: ${{ secrets.GKE_ZONE }}
        credentials: ${{ secrets.GKE_SA_KEY }}

    # Setting Environment Variables
    - name: Setting Environment Variables
      id: Setting_Environment_Variables
      run: |-
        # HASH short commit
          branch_name=`git symbolic-ref HEAD 2>/dev/null | cut -d"/" -f 3`  # GETTING CURRENT BRANCH NAME
          commit_hash=`git rev-parse --short HEAD`  # CURRENT COMMIT short HASH
          PROJECT_VERSION=${branch_name}-${commit_hash}
          echo "PROJECT_VERSION = $PROJECT_VERSION"
          echo "::set-output name=PROJECT_VERSION::$PROJECT_VERSION"
        # FILENAME
          FILENAME="gcr.io/$PROJECT_ID/$APP_NAME:$PROJECT_VERSION"
          echo "::set-output name=FILENAME::$FILENAME"
        # URL (Add to your /etc/hosts string: `IngressAdrress *.taskurban.com`)
          if [[ ${{ github.event.inputs.env }} == "prod" ]] ; then
            URL="taskurban.com"
          else
            URL="${{ github.event.inputs.env }}.taskurban.com"
          fi
          echo "::set-output name=URL::$URL"

    # Build the Docker image
    - name: Build
      run: |-
        FILENAME="${{  steps.Setting_Environment_Variables.outputs.FILENAME  }}"
        docker build \
          --tag $FILENAME \
          --build-arg GITHUB_SHA="$GITHUB_SHA" \
          --build-arg GITHUB_REF="$GITHUB_REF" \
          application/.

    # Push the Docker image to Google Container Registry
    - name: Publish
      id: Publish
      run: |-        
        FILENAME="${{  steps.Setting_Environment_Variables.outputs.FILENAME  }}"
        docker push $FILENAME

    # Deploy the Docker image to the GKE cluster
    - name: Deploy
      run: |-
        FILENAME="${{  steps.Setting_Environment_Variables.outputs.FILENAME  }}"
        # Change Service
          sed -i "s|templatename-srv|templatename-${{ github.event.inputs.env }}-srv|g" deploy-app/*.yml
        # Add App-Name
          sed -i "s|templatename|$APP_NAME|g" deploy-app/*.yml
        # Change Docker-image
          sed -i "s|docker_image|$FILENAME|g" deploy-app/deploy.yml
        # change URL taskurban.com
          sed -i "s|taskurban.com|${{  steps.Setting_Environment_Variables.outputs.URL  }}|g" deploy-app/ingress.yml
        # Deploy in NameSpace = $inputs.env
          kubectl apply -n ${{ github.event.inputs.env }} -f deploy-app/
          kubectl apply -n ${{ github.event.inputs.env }} -f deploy-app/
          kubectl apply -n ${{ github.event.inputs.env }} -f deploy-app/

    # Slack Finish Notification
    - name: Slack Finish Notification
      id: Slack_Notification_Finish
      run: |
        sed -i "s|inputs.FILENAME|*${{ steps.Build_Docker_Image_And_Push_It_To_ACR.outputs.FILENAME }}*|" $slackFinish
        sed -i "s|inputs.APP_NAME|*$APP_NAME*|" $slackFinish
        sed -i "s|inputs.GKS_NAMESPACE|*${{ steps.Setting_Environment_Variables.outputs.SBOX }}*|" $slackFinish
        sed -i "s|inputs.URL|${{ steps.Setting_Environment_Variables.outputs.URL }}|g" $slackFinish
        cp $slackFinish slack.yml
        cat slack.yml
    - uses: act10ns/slack@v1.5.0
      with:
        status: ${{ job.status }}
        steps: ${{ toJson(steps) }}
        channel: "#test-chat-ops"
        config: slack.yml
      if: always()
